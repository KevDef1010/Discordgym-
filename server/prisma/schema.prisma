generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String          @id @default(cuid())
  discordId  String          @unique
  username   String          @unique
  email      String          @unique
  password   String?
  avatar     String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  isActive   Boolean         @default(true)
  role       UserRole        @default(MEMBER)
  displayId  String?         @unique
  progress   Progress[]
  servers    ServerMember[]
  challenges UserChallenge[]
  workouts   Workout[]

  @@map("users")
}

model Server {
  id         String         @id @default(cuid())
  discordId  String         @unique
  name       String
  icon       String?
  ownerId    String
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  challenges Challenge[]
  members    ServerMember[]

  @@map("servers")
}

model ServerMember {
  id       String     @id @default(cuid())
  userId   String
  serverId String
  role     MemberRole @default(MEMBER)
  joinedAt DateTime   @default(now())
  server   Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, serverId])
  @@index([serverId], map: "server_members_serverId_fkey")
  @@map("server_members")
}

model Workout {
  id             String      @id @default(cuid())
  userId         String
  name           String
  description    String?
  type           WorkoutType
  duration       Int?
  caloriesBurned Int?
  date           DateTime    @default(now())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  exercises      Exercise[]
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "workouts_userId_fkey")
  @@map("workouts")
}

model Exercise {
  id        String  @id @default(cuid())
  workoutId String
  name      String
  sets      Int?
  reps      Int?
  weight    Float?
  distance  Float?
  duration  Int?
  notes     String?
  order     Int     @default(0)
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@index([workoutId], map: "exercises_workoutId_fkey")
  @@map("exercises")
}

model Challenge {
  id           String          @id @default(cuid())
  serverId     String
  name         String
  description  String
  type         ChallengeType
  target       Float
  unit         String
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  server       Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  participants UserChallenge[]

  @@index([serverId], map: "challenges_serverId_fkey")
  @@map("challenges")
}

model UserChallenge {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  progress    Float     @default(0)
  completed   Boolean   @default(false)
  joinedAt    DateTime  @default(now())
  completedAt DateTime?
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([challengeId], map: "user_challenges_challengeId_fkey")
  @@map("user_challenges")
}

model Progress {
  id        String       @id @default(cuid())
  userId    String
  type      ProgressType
  value     Float
  unit      String
  date      DateTime     @default(now())
  notes     String?
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "progress_userId_fkey")
  @@map("progress")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  TRAINER
  PREMIUM_USER
  MEMBER
  GUEST
}

enum MemberRole {
  OWNER
  ADMIN
  MODERATOR
  TRAINER
  VIP
  MEMBER
  GUEST
}

enum WorkoutType {
  CARDIO
  STRENGTH
  FLEXIBILITY
  SPORTS
  HIIT
  YOGA
  CROSSFIT
  OTHER
}

enum ChallengeType {
  STEPS
  DISTANCE
  WEIGHT_LOSS
  WORKOUT_COUNT
  DURATION
  CALORIES
  CUSTOM
}

enum ProgressType {
  WEIGHT
  BODY_FAT
  MUSCLE_MASS
  MEASUREMENTS
  OTHER
}
