version: '3.8'

services:
  # NGINX Load Balancer
  nginx-lb:
    image: nginx:alpine
    ports:
      - "80:80"
      - "3001:3001"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/upstreams.conf:/etc/nginx/conf.d/upstreams.conf
    depends_on:
      - discordgym-api-1
      - discordgym-api-2
      - discordgym-api-3
      - discordgym-ui
    restart: unless-stopped
    networks:
      - discordgym-network

  # Frontend Service
  discordgym-ui:
    build:
      context: ./client
      dockerfile: Dockerfile
    volumes:
      - ./client/nginx.conf:/etc/nginx/conf.d/default.conf
    environment:
      - NODE_ENV=development
    restart: unless-stopped
    networks:
      - discordgym-network

  # Backend Service #1
  discordgym-api-1:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DATABASE_URL=mysql://discordgym:discordgym123@db:3306/discordgym
      - REDIS_URL=redis://redis-password@redis:6379
      - JWT_SECRET=DgSecure2024!JWT#Secret$Random%Token&Key*2025
      - JWT_REFRESH_SECRET=DgRefresh2024!JWT#Secret$Random%Token&Key*2025
      - INSTANCE_ID=api-1
      - PORT=3000
    restart: unless-stopped
    networks:
      - discordgym-network
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service #2
  discordgym-api-2:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DATABASE_URL=mysql://discordgym:discordgym123@db:3306/discordgym
      - REDIS_URL=redis://redis-password@redis:6379
      - JWT_SECRET=DgSecure2024!JWT#Secret$Random%Token&Key*2025
      - JWT_REFRESH_SECRET=DgRefresh2024!JWT#Secret$Random%Token&Key*2025
      - INSTANCE_ID=api-2
      - PORT=3000
    restart: unless-stopped
    networks:
      - discordgym-network
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service #3 (n+1 Backup)
  discordgym-api-3:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DATABASE_URL=mysql://discordgym:discordgym123@db:3306/discordgym
      - REDIS_URL=redis://redis-password@redis:6379
      - JWT_SECRET=DgSecure2024!JWT#Secret$Random%Token&Key*2025
      - JWT_REFRESH_SECRET=DgRefresh2024!JWT#Secret$Random%Token&Key*2025
      - INSTANCE_ID=api-3-backup
      - PORT=3000
    restart: unless-stopped
    networks:
      - discordgym-network
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Service
  db:
    image: mariadb:10.11
    environment:
      - MARIADB_ROOT_PASSWORD=root
      - MARIADB_DATABASE=discordgym
      - MARIADB_USER=discordgym
      - MARIADB_PASSWORD=discordgym123
    volumes:
      - mariadb_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - discordgym-network
    restart: unless-stopped

  # Redis f√ºr Sessions, Cache & Socket.IO
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis-password --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - discordgym-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Prisma Studio (Development Only)
  prisma-studio:
    build:
      context: ./server
      dockerfile: Dockerfile.prisma
    ports:
      - "5556:5555"
    environment:
      - DATABASE_URL=mysql://discordgym:discordgym123@db:3306/discordgym
    networks:
      - discordgym-network
    depends_on:
      - db
    restart: unless-stopped

volumes:
  mariadb_data:
  redis_data:

networks:
  discordgym-network:
    driver: bridge
