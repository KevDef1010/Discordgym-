version: '3.8'

services:
  # API Service
  discordgym-api:
    container_name: discordgym-api
    image: discord-gym-api:latest
    restart: always
    env_file:
      - ./server/.env.production
    depends_on:
      - db
      - redis
    networks:
      - traefik_network
      - internal_network
    volumes:
      - ./uploads:/app/uploads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.your-domain.com`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
      # Socket.IO spezifische Regeln
      - "traefik.http.routers.socket.rule=Host(`socket.your-domain.com`)"
      - "traefik.http.routers.socket.entrypoints=websecure"
      - "traefik.http.routers.socket.tls.certresolver=letsencrypt"
      - "traefik.http.services.socket.loadbalancer.server.port=3000"

  # Frontend Service
  discordgym-ui:
    container_name: discordgym-ui
    image: discord-gym-ui:latest
    restart: always
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.your-domain.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80" # Nginx Server in Angular Container

  # Database
  db:
    container_name: discordgym-db
    image: mariadb:10.11
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MARIADB_DATABASE: discord_gym_prod
      MARIADB_USER: ${DB_USER}
      MARIADB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - internal_network
    # Keine Labels für Traefik, da keine direkte externe Erreichbarkeit

  # Redis für Socket.IO State
  redis:
    container_name: discordgym-redis
    image: redis:7-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - internal_network
    # Keine Labels für Traefik, da keine direkte externe Erreichbarkeit

  # Optional: Monitoring mit Prometheus/Grafana
  prometheus:
    container_name: discordgym-prometheus
    image: prom/prometheus:v2.43.0
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - internal_network
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.your-domain.com`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.middlewares=auth@file"

  grafana:
    container_name: discordgym-grafana
    image: grafana/grafana:9.5.1
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - internal_network
      - traefik_network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`dashboard.your-domain.com`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.middlewares=auth@file"

volumes:
  db_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  traefik_network:
    external: true
  internal_network:
    internal: true
